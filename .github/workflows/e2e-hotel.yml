name: Hotel-App End-to-End Tests

on:
  workflow_dispatch:
    schedule:
      - cron: "0 9 * * 1"
  push:
    branches: [main]
    paths:
      - "benchmarks/hotel-app/**"
      - "utils/**"
      - "tools/**"
      - "runner/**"

  pull_request:
    branches: [main]
    paths:
      - "benchmarks/hotel-app/**"
      - "utils/**"
      - "tools/**"
      - "runner/**"

env:
  GOOS: linux
  GO111MODULE: on
  PORT: 50051

jobs:
  build-and-push:
    name: Build and push all images
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          lfs: "true"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        working-directory: benchmarks/hotel-app
        env:
          GOPRIVATE_KEY: ${{ secrets.EASE_LAB_ACCESS_KEY }}
        run: |
          make all
          make push

  test-compose:
    name: Test Docker Compose
    needs: build-and-push
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        service:
          [
            geo,
            geo-tracing,
            profile,
            rate,
            recommendation,
            reservation,
            user,
            search,
            search-tracing,
          ]

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          lfs: "true"

      - name: start docker-compose benchmark
        working-directory: benchmarks/hotel-app/yamls/docker-compose
        run: |
          docker-compose -f dc-${{ matrix.service }}.yaml pull
          docker-compose -f dc-${{ matrix.service }}.yaml up &> log_file &
          sleep 60s
          cat log_file

      - name: invoke the chain
        run: |
          ./tools/bin/grpcurl -plaintext localhost:50000 helloworld.Greeter.SayHello

      - name: show docker-compose log
        run: cat benchmarks/hotel-app/yamls/docker-compose/log_file


  test-knative:
    name: Test Knative Deployment
    needs: build-and-push
    env:
      KIND_VERSION: v0.14.0
      K8S_VERSION: v1.22.10
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: hotel-app-geo
            file: kn-geo.yaml
          - service: hotel-app-geo-tracing
            file: kn-geo-tracing.yaml
          - service: hotel-app-profile
            file: kn-profile.yaml
          - service: hotel-app-rate
            file: kn-rate.yaml
          - service: hotel-app-recommendation
            file: kn-recommendation.yaml
          - service: hotel-app-reservation
            file: kn-reservation.yaml
          - service: hotel-app-user
            file: kn-user.yaml
          - service: hotel-app-search
            file: kn-search.yaml
          - service: hotel-app-search-tracing
            file: kn-search-tracing.yaml
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: "true"
      - name: Checkout LFS objects
        run: git lfs checkout

      - uses: actions/setup-go@v3
        with:
          go-version: 1.18

      ## Setup a Knative cluster to test the service
      - name: Create k8s Kind Cluster
        run: bash ./runner/scripts/01-kind.sh

      - name: Install Serving
        run: bash ./runner/scripts/02-serving.sh

      - name: Install Kourier
        run: bash ./runner/scripts/02-kourier.sh

      - name: Setup domain
        run: |
          INGRESS_HOST="127.0.0.1"
          KNATIVE_DOMAIN=$INGRESS_HOST.nip.io
          kubectl patch configmap -n knative-serving config-domain -p "{\"data\": {\"$KNATIVE_DOMAIN\": \"\"}}"

      ## Test the service
      - name: Deploy database and memcached
        working-directory: benchmarks/hotel-app/yamls/knative/
        run: |
          kubectl apply -f database.yaml
          kubectl apply -f memcached.yaml

      - name: Deploy knative
        working-directory: benchmarks/hotel-app/yamls/knative/
        run: |
          kubectl apply -f ${{ matrix.file }}
          kubectl wait --for=condition=Ready -f ${{ matrix.file }} --timeout 120s

      - name: Check if service is ready
        working-directory: benchmarks/online-shop/yamls/knative/
        run: |
          kubectl get service
          kubectl get -f ${{ matrix.file }}

      - name: Test invoking once
        working-directory: tools/test-client
        run: |
          set -x
          go build ./test-client.go

          NODEPORT=80
          url=$(kubectl get kservice ${{ matrix.service }} -o url | awk '$1 {sub(/http\:\/\//,""); print $1}')

          ./test-client --addr $url:$NODEPORT --name "Example text for Hotel App CI"

      - name: Print logs
        if: ${{ always() }}
        run: |
          set -x
          container_list=$(kubectl get pods -n default -o jsonpath="{.items[*].spec.containers[*].name}")
          for container_name in $container_list
          do
            kubectl logs -n default -c $container_name -l serving.knative.dev/service=${{ matrix.service }}
          done

      - name: Print logs from database and mmc
        if: ${{ always() }}
        run: |
          set -x
          kubectl logs deployment/hotel-app-database
          kubectl logs deployment/hotel-app-mmc

      - name: Down
        working-directory: benchmarks/hotel-app/yamls/knative/
        if: ${{ always() }}
        run: |
          kubectl delete -f ${{ matrix.file }} --namespace default --wait
          kubectl delete -f database.yaml
          kubectl delete -f memcached.yaml
